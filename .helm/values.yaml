## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName

lumen:
  image:
    registry: docker.io
    repository: rudranil29/drupal
    tag: latest
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistryKeySecretName

  ## Specify the port where your application will be running
  ##
  applicationPort: 80

  ## Node conatiners' resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
  ## Configure liveness and readiness probes.
  ## lumen core exposes /user/login to unauthenticated requests, making it a good
  ## default liveness and readiness path. However, that may not always be the
  ## case. For example, if the image value is overridden to an image containing a
  ## module that alters that route, or an image that does not auto-install lumen.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  #
  livenessProbe:
    httpGet:
        path: /
        port: 80
    initialDelaySeconds: 2
    periodSeconds: 10
  readinessProbe:
    httpGet:
        path: /
        port: 80
    initialDelaySeconds: 2
    periodSeconds: 10

## String to partially override node.fullname template (will maintain the release name)
##
# nameOverride:

## String to fully override node.fullname template
##
# fullnameOverride:

## Application password
## Defaults to a random 10-character alphanumeric string if not set
## ref: https://github.com/bitnami/bitnami-docker-lumen#configuration
##
# lumenPassword:

## Specify the number of replicas for the application
##
replicas: 1

## Define custom environment variables to pass to the image here
##
# extraEnv:
#   - name: lumen_HOST
#     value: http://lumen-dev

## Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Node labels for pod assignment. Evaluated as a template.
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for pod assignment. Evaluated as a template.
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: {}

## Pod Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
securityContext:
  enabled: false
  fsGroup: 1000
  runAsUser: 1000

## External database configuration
##
postgresdb:
  ## Database host
  host: postgresql

  ## Database host
  port: "5432"

  ## Database user
  user: postgres

  ## Database password
  password: Srijan@123

  ## Database name
  database: lumendb

  ## Database connection
  connection: pgsql

extraEnvs:
  appName: Lumen
  appEnv: local
  appDebug: 'true'
  appUrl: 'http://localhost'
  appTimezone: UTC
  logChannel: stack
  cacheDriver: file
  queueConnection: sync
  

# externalRedis:
#   ## Redis host
#   host: 

#   ## Redis RO host
#   hostRo: 

#   ## Redis port
#   port: "6379"

# cache:
#   ## Host
#   host: 

#   ##  Port
#   port: "11211"

## Service paramaters
service:
  ## Service type
  ##
  type: ClusterIP
  ## HTTP Port
  ##
  port: 80
  ## Specify the nodePort value for the LoadBalancer and NodePort service types.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  # nodePort:
  ## Set the LoadBalancer service type to internal only.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  # loadBalancerIP:
  ## Provide any additional annotations which may be required. This can be used to
  ## set the LoadBalancer service type to internal only.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  annotations: {}

## Persistence paramaters
##
# pvc:
#   storageClass: aws-efs
#   size: 20Gi
#   accessMode: ReadWriteMany

## Ingress paramaters
##
ingress:
  ## Set to true to enable ingress record generation
  ##
  enabled: false

  ## The list of hostnames to be covered with this ingress record.
  ## Most likely this will be just one host, but in the event more hosts are needed, this is an array
  hosts:
    - name: "*"

      ## Set the path after hostname, default is '/'
      ##
      path: /

      ## Set this to true in order to enable TLS on the ingress record
      ##
      tls: false

      ## Set this to true in order to add the corresponding annotations for cert-manager
      ##
      certManager: false

      ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
      ##
      tlsSecret: lumen.local-tls

      ## Ingress annotations done as key:value pairs
      ## For a full list of possible ingress annotations, please see
      ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
      ##
      ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
      annotations:
        kubernetes.io/ingress.class: kong

  secrets:
  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  # - name: node.local-tls
  #   key:
  #   certificate:


## HorizontalPodAutoscaler for node
HPA:
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80

